#!/bin/bash

# NOTE :
#        Please do not edit this file, as it will be replaced during upgrade.
	
# Field 1  = Total number of reads completed successfully.(3)
# Field 2  = Number of reads merged 
# Field 3  = Total number of sectors read successfully.(5)
# Field 4  = Number of milliseconds spent reading
# Field 5  = Total number of writes completed successfully.
# Field 6  = Number of writes merged
# Field 7  = Total number of sectors written successfully.(9)
# Field 8  = Number of milliseconds spent writing
# Field 9  = Number of I/Os currently in progress
# Field 10 = Number of milliseconds spent doing I/Os
# Field 11 = Weighted number of milliseconds spent doing I/Os

diskDetails() {
        df -T | grep -iv Filesystem | awk 'BEGIN {
                ORS="\n";
                partitionNameArray[0] = 0;
        }
        {       
                #print "Processing Record ",NR,NF,$NF;
                if ($NF in partitionNameArray == 0)
                {
                        partitionNameArray[$NF] = $NF
                        if (NF > 2)
                        {
                                printf $NF" -- %.0f -- %.0f \n",(($(NF-3)*1024)+($(NF-2)*1024)), $(NF-2)*1024      
                        }
                }
        }'
}

# Output format :
# PARTITIONS : sda hda
# sda : 220185600(reads in bytes) : 2215878656(writes in bytes) 
# hda : 2469888(reads in bytes) : 0(writes in bytes) 


diskStats() {
	PARTITIONS=(`awk 'NR > 1 && $0 !~ /dm-|loop|drbd/ && $4 !~ /[0-9]$/ {ORS=" "; print $4}' /proc/partitions`)
	#echo "PARTITIONS : ${PARTITIONS[@]}"
	if [ "${#PARTITIONS[@]}" -eq 0 ]; then
	    PARTITIONS=(`awk 'NR > 1 && $0 !~ /dm-|loop|drbd/ {ORS=" "; print $4}' /proc/partitions`)
	    #echo "PARTITIONS : ${PARTITIONS[@]}"
	fi
	NUMBER_OF_SECTORS_READ=0
	NUMBER_OF_SECTORS_WRITE=0
	BYTES_PER_SECTOR=512
	for (( i = 0; i < ${#PARTITIONS[@]} ; i++ )); do
    	#printf "awk -v dev=${PARTITIONS[$i]} '$3 == dev' /proc/diskstats \n"
    	STATS_ARR=(`awk -v dev=${PARTITIONS[$i]} '$3 == dev' /proc/diskstats`)
    	#echo "STATS_ARR : ${STATS_ARR[@]}"
    	#echo "${STATS_ARR[2]} : ${STATS_ARR[5]} : ${STATS_ARR[9]}"
    	NUMBER_OF_SECTORS_READ=$(($NUMBER_OF_SECTORS_READ + ${STATS_ARR[5]}))
    	NUMBER_OF_SECTORS_WRITE=$(($NUMBER_OF_SECTORS_WRITE + ${STATS_ARR[9]}))
	done
	READ_IN_BYTES=$(($NUMBER_OF_SECTORS_READ * $BYTES_PER_SECTOR))
	WRITE_IN_BYTES=$(($NUMBER_OF_SECTORS_WRITE * $BYTES_PER_SECTOR))
	#echo "Disk I/O : $NUMBER_OF_SECTORS_READ : $NUMBER_OF_SECTORS_WRITE"
	echo "Disk I/O bytes : $READ_IN_BYTES : $WRITE_IN_BYTES"
}

diskErrors() {
	dmesg | grep -w "I/O error\|EXT2-fs error\|EXT3-fs error\|EXT4-fs error\|UncorrectableError\|DriveReady SeekComplete Error\|I/O Error Detected" | sort -u	
}

dmesgErrors() {
	dmesg | grep -i 'error' | tail -n 10	
}

main() {
	if [ "$1" == "disk_details" ]; then
		diskDetails
	elif [ "$1" == "disk_stats" ]; then
		diskStats
	elif [ "$1" == "disk_err" ]; then
		diskErrors
	elif [ "$1" == "dmesg_err" ]; then
		dmesgErrors
	fi
}

main $1
