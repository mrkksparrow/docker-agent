#!/bin/bash

# NOTE :
#	 Please do not edit this file, as it will be replaced during upgrade.

# Handle count - http://stackoverflow.com/questions/9938883/monitor-cpu-time-handle-count-private-bytes-thread-count-for-a-process-in-li
declare -a ARG_ARR=("$@")
PROCESS_DETAILS_COMMAND='/bin/ps -eo pid,fname,pcpu,pmem,nlwp,command,args'

AGENT_KEY=''
AGENT_REQUEST_ID=''
REQUEST_NAME=''
ERROR_MSG=''
DATA_COLLECTION_TIME=''
CSV_PROCESS_NAMES=''
FILTER_PROCESS_NAMES_ARR=''
DISCOVER_PROCESSES_AND_SERVICES='DISCOVER_PROCESSES_AND_SERVICES'
PROCESS_LOG_DATA='PROCESS_LOG_DATA'
TEST_MONITOR='TEST_MONITOR'

parseInputArguments() {
	for (( i = 0; i < ${#ARG_ARR[@]} ; i++ )); do
	    if [ $i == 0 ]; then
			AGENT_KEY=${ARG_ARR[$i]}
		elif [ $i == 1 ]; then
			AGENT_REQUEST_ID=${ARG_ARR[$i]}
		elif [ $i == 2 ]; then
			REQUEST_NAME=${ARG_ARR[$i]}
		elif [ $i == 3 ]; then
			ERROR_MSG=${ARG_ARR[$i]}
		elif [ $i == 4 ]; then
			DATA_COLLECTION_TIME=${ARG_ARR[$i]}
		elif [ $i == 5 ]; then
			CSV_PROCESS_NAMES=${ARG_ARR[$i]}
		fi
	done	
}
processDetails() {
		$PROCESS_DETAILS_COMMAND | awk 'BEGIN {
			ORS="\n";		
			append_flag = 0;	
		}
		function processNameFilter(processName) {
			csvProcessNames = "'"$CSV_PROCESS_NAMES"'"			
			split(csvProcessNames,processNameArray,",")
			if (csvProcessNames == "")
			{
				return 1	
			}
			for (i in processNameArray)
			{		
				if (processNameArray[i] == processName) {					
					return 1
				}			  
			}
			return 0
		}
		function printAgentRequestDetails () {
			printf("{")
			customPrint("AGENTKEY", "'"$AGENT_KEY"'")
			printf(",")
			customPrint("DATACOLLECTTIME", "'"$DATA_COLLECTION_TIME"'")
			printf(",")
			customPrint("NAME", "'"$REQUEST_NAME"'")
			printf(",")
			customPrint("ERRORMSG", "'"$ERROR_MSG"'")
			printf(",")
			customPrint("AGENT_REQUEST_ID", "'"$AGENT_REQUEST_ID"'")			
		}
		function customPrint ( key, value ) {
			printf("\""key"\":\""value"\"")
		}
		{
			if (NR == 1) {
				printAgentRequestDetails()				
				#printf(",\"Service Details\":[{}]")
				if("'"$TEST_MONITOR"'" == "'"$REQUEST_NAME"'")
				{
					printf(",\"PROCESS_LOG_DATA\":[{")
				}
				else
				{
					printf(",\"Process Details\":[{")
				}				
			}
			else {
				processName = $2
				exePath = $6
				commandArgs = substr($0,59,length($0))
				gsub("\"", "\\\"", processName)
				gsub("\"", "\\\"", exePath)
				gsub("\"", "\\\"", commandArgs)
				awkProcessIndex = index(commandArgs,"processNameFilter")
				if (awkProcessIndex == 0) {
					if (processNameFilter(processName)) {
						if (append_flag) {
							printf("}")
							printf(",")					
							printf("{")
						}
						fd = 0
						handleCountCommand = "ls /proc/"$1"/fd | /usr/bin/wc -l"
						ishandleCountCommandSuccess = (handleCountCommand | getline fd)	
						if("'"$TEST_MONITOR"'" == "'"$REQUEST_NAME"'")
						{
							customPrint("ProcessId", $1)
							printf(",")
							customPrint("Name", processName)
							printf(",")
							customPrint("ExecutablePath", exePath)
							printf(",")
							customPrint("CommandLine", commandArgs)
							printf(",")
							customPrint("CPU_UTILIZATION", $3)
							printf(",")
							customPrint("MEMORY_UTILIZATION", $4)
							printf(",")
							customPrint("ThreadCount", $5)
							printf(",")
							customPrint("HandleCount", fd)
						}	
						else
						{			
							customPrint("PROCESS_ID", $1)
							printf(",")
							customPrint("PROCESS_NAME", processName)
							printf(",")
							customPrint("EXEUTABLE_PATH", exePath)
							printf(",")
							customPrint("COMMANDLINE", commandArgs)
							if("'"$DISCOVER_PROCESSES_AND_SERVICES"'" != "'"$REQUEST_NAME"'")
							{
								printf(",")
								customPrint("CPU_UTILIZATION", $3)
								printf(",")
								customPrint("MEMORY_UTILIZATION", $4)
								printf(",")
								customPrint("THREAD_COUNT", $5)
								printf(",")
								customPrint("HANDLE_COUNT", fd)
							}
						}
						append_flag = 1
					}
				}
			}
			
		}
		END{print "}]}"}'
}

processDetailsTest() {
		$PROCESS_DETAILS_COMMAND | awk 'BEGIN {
			ORS="\n";
		}
		{
			if (NR == 1) {
				print "PROCESS_ID		PROCESS_NAME		CPU_UTILIZATION			MEMORY_UTILIZATION			THREAD_COUNT		HANDLE_COUNT		EXEUTABLE_PATH"
			}
			if (NR > 1) {	
				fd = 0
				handleCountCommand = "ls /proc/"$1"/fd | /usr/bin/wc -l"
				ishandleCountCommandSuccess = (handleCountCommand | getline fd)		
				#print "error: "ishandleCountCommandSuccess			
				print $1"			"$2"			"$3"			"$4"			"$5"			"fd
			}
		}
		END{print ""}'	
}

testOutput() {
	echo 'AGENT_KEY : '$AGENT_KEY
	echo 'AGENT_REQUEST_ID : '$AGENT_REQUEST_ID
	echo 'REQUEST_NAME : '$REQUEST_NAME
	echo 'ERROR_MSG : '$ERROR_MSG
	echo 'DATA_COLLECTION_TIME : '$DATA_COLLECTION_TIME
	echo 'FILTER_PROCESS_NAMES : '$FILTER_PROCESS_NAMES
	FILTER_PROCESS_NAMES_ARR=(${CSV_PROCESS_NAMES//,/ })
	echo 'array : '${FILTER_PROCESS_NAMES_ARR[@]}
	for (( i = 0; i < ${#FILTER_PROCESS_NAMES_ARR[@]} ; i++ )); do
	    echo "$i = ${FILTER_PROCESS_NAMES_ARR[$i]} "	    
	done
}

parseInputArguments
processDetails
#processDetailsTest
